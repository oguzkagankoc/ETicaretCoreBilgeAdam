@* List<KategoriModel> Model; *@
@*@model List<Business.Models.KategoriModel>*@ @* View'da Model objesi olarak kullanılır. *@
@* 
    Her seferinde class'ın namespace'i üzerinden kullanılması yerine 
    ~/Views/_ViewImports.cshtml dosyasına namespace için using eklenerek direkt 
    tip adı kullanılabilir.
*@
@model List<KategoriModel>

<h2>Kategoriler</h2>
<br />

<p>
    @*<a asp-action="OlusturGetir" asp-controller="Kategoriler">Yeni Kategori</a>*@
    <a asp-action="OlusturGetir">Yeni Kategori</a>
</p>

@if (Model != null && Model.Count > 0)
{
    <p class="bg-primary text-white">
        @Model.Count kayıt bulundu
    </p>
}
else
{
    <p class="bg-primary text-white">
        Kayıt bulunamadı
    </p>
}

<table class="table">
    <thead>
        <th>
            Adı
        </th>
        <th>
            Açıklaması
        </th>
        <th>

        </th>
    </thead>
    <tbody>
        @foreach (KategoriModel kategori in Model)
        {
            <tr>
                <td>
                    @kategori.Adi
                </td>
                <td>
                    @kategori.Aciklamasi
                </td>
                <td>
                    <a href="/Kategoriler/Edit/@kategori.Id">Düzenle</a>&nbsp;|&nbsp;
                    <a href="/Kategoriler/Delete/@kategori.Id">Sil</a>&nbsp;|&nbsp;
                    <a href="/Kategoriler/Details/@kategori.Id">Detay</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Kategoriler controller'ının Edit post ve Delete get action'larında TempData["Success"] set ediliyor ve burada kullanılıyor. *@
@if (TempData["Success"] != null)
{
    <p class="bg-success text-white">
        @TempData["Success"]
    </p>
}

@* Kategoriler controller'ının Delete get action'ında TempData["Error"] set ediliyor ve burada kullanılıyor. *@
@if (TempData["Error"] != null)
{
    <p class="bg-danger text-white">
        @TempData["Error"]
    </p>
}